package DAO;

import Util.ConnectionUtil;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import Model.Message;
import java.util.Optional;

 
public class MessageDAO
{
    /**
     * @info A DAO that will insert a new message into the database
     * @param message A message object that is to be inserted into the database
     * @return The Message Object that was created in the database
     */
    public Message createNewMessage(Message message)
    {
        Connection connection = ConnectionUtil.getConnection();

        //Try block to handle any sql errors
        try {
            String sql = "INSERT INTO Message (posted_by, message_text, time_posted_epoch) VALUES (?, ?, ?)";
            PreparedStatement ps = connection.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);

            //Setting the prepaired statement prarameters
            ps.setInt(1, message.getPosted_by());
            ps.setString(2, message.getMessage_text());
            ps.setLong(3, message.time_posted_epoch);

            ps.executeUpdate();

            //Gets the generated keys from the message and sets the message id to keys generated by SQL
            try (ResultSet generatedKeys = ps.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    message.setMessage_id(generatedKeys.getInt(1));
                }
            }
          
        //Catch block to catch execptions and print the stack trace
        }catch(SQLException e){
            e.printStackTrace();
        }
        return message;
    }

    /**
     * @info A DAO Object that will update a message given a differnt message object and an existing ID.
     * @param messageID The id of a message that is to be changed
     * @return An Optional Message Object that was changed in the database. THe optional will be null if no message was found.
     */
    public Optional<Message> updateMessageText(int messageId, Message message)
    {
        Connection connection = ConnectionUtil.getConnection();

        //Try block to handle any sql errors
        try {
            String sql = "UPDATE Message SET message_text = ? WHERE message_id = ?";
            PreparedStatement ps = connection.prepareStatement(sql);

            //Setting the prepaired statement prarameters
            ps.setString(1, message.getMessage_text());
            ps.setInt(2, messageId);
            ps.executeUpdate();
         
        //Catch block to catch execptions and print the stack trace
        }catch(SQLException e){
            e.printStackTrace();
        }
        return retriveMessageById(messageId);
    }


    /**
     * @info A DAO that will retrive all existing messages in the database
     * @return A list of all messages in the datbase
    */
    public List<Message> retriveAllMessages()
    {
        Connection connection = ConnectionUtil.getConnection();
        List<Message> messageList = new ArrayList<Message>();
        ResultSet rs;

        //Try block to handle any sql errors
        try {
            String sql = "SELECT * FROM Message";
            PreparedStatement ps = connection.prepareStatement(sql);

            rs = ps.executeQuery();

            //Loops through all the results in the result set and addes them to a list of messages
            while (rs.next()) 
            {
                Message message = new Message();
    
                message.setMessage_id(rs.getInt("message_id"));
                message.setMessage_text(rs.getString("message_text"));
                message.setPosted_by(rs.getInt("posted_by"));
                message.setTime_posted_epoch(rs.getLong("time_posted_epoch"));
    
                messageList.add(message);
            }
        
        //Catch block to catch execptions and print the stack trace
        }catch(SQLException e){
            e.printStackTrace();
        }

        return messageList;
    } 

    /**
     * @info A DAO Object that will retrive a message given its ID.
     * @param messageID The id of a message that is to be changed.
     * @return An optional of the message object that was retrived. The optional will contain null if no message was found
     */
    public Optional<Message> retriveMessageById(int messageId)
    {
        Connection connection = ConnectionUtil.getConnection();
        
        ResultSet rs;

        //Try block to handle any sql errors
        try {
            String sql = "SELECT * FROM Message WHERE message_id = ?";
            PreparedStatement ps = connection.prepareStatement(sql);
            ps.setInt(1,messageId);

            rs = ps.executeQuery();
            //Checks if the result set found a matching mesage and crates a new message to be returned
            if (rs.next()){
                Message message = new Message();
                message.setMessage_id(rs.getInt("message_id"));
                message.setMessage_text(rs.getString("message_text"));
                message.setPosted_by(rs.getInt("posted_by"));
                message.setTime_posted_epoch(rs.getLong("time_posted_epoch"));
                return Optional.of(message);
            }
        }
        //Catch block to catch execptions and print the stack trace
        catch(SQLException e){
            e.printStackTrace();
        }
        return Optional.empty();
    }  

    /**
     * @info A DAO Object that will delete a message given its ID.
     * @param messageID The id of a message that is to be deleted.
     */
    public void deleteMessageById(int messageId)
    {
        Connection connection = ConnectionUtil.getConnection();

        //Try block to handle any sql errors
        try {
            String sql = "DELETE * FROM Message WHERE message_id = ?";
            PreparedStatement ps = connection.prepareStatement(sql);
            //Setting the prepaired statement prarameters
            ps.setInt(1,messageId);
        }
        //Catch block to catch execptions and print the stack trace
        catch(SQLException e){
            e.printStackTrace();
        }
    }

    /**
     * @info A DAO Object that will retrive all messages posted by a user given the users ID.
     * @param author_id The id of a message that is to be changed.
     * @return A list of the message objects that was retrived.
     */
    public List<Message> retriveMessageByUserId(int author_id)
    {
        Connection connection = ConnectionUtil.getConnection();
        List<Message> messageList = new ArrayList<Message>();
        ResultSet rs;

        //Try block to handle any sql errors
        try {
            String sql = "SELECT * FROM Message WHERE posted_by = ?";
            PreparedStatement ps = connection.prepareStatement(sql);
            //Setting the prepaired statement prarameters
            ps.setInt(1, author_id);

            rs = ps.executeQuery();

            //Loops through all the results in the result set and addes them to a list of messages
            while (rs.next()) 
            {
                Message message = new Message();
    
                message.setMessage_id(rs.getInt("message_id"));
                message.setMessage_text(rs.getString("message_text"));
                message.setPosted_by(rs.getInt("posted_by"));
                message.setTime_posted_epoch(rs.getLong("time_posted_epoch"));
    
                messageList.add(message);
            }
        
        //Catch block to catch execptions and print the stack trace
        }catch(SQLException e){
            e.printStackTrace();
        }

        return messageList;
    } 
}